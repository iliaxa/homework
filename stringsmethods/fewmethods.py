my_string = 'с4мый длинный and РазНоОбРазнЫй текст в Мир3, ном3р 1'
print(my_string)
print('Количество символов в строке:', len(my_string)) #Функция len() возвращает длину строки.
print(my_string[0]) #срезы
print(my_string[-1]) #срезы
print(my_string.upper()) #приводят все символы строк к верхнему регистру.
print(my_string.lower()) #приводят все символы строк к нижнему регистру.

print(my_string.islower()) #Метод islower() возвращает True только в том случае, если строка составлена исключительно из нижнего регистра.
print(my_string[0].islower()) #метод islower() для первого символа строки. Проверяет то, что строка начинается со строчной буквы
print(my_string.isupper()) #Метод isupper() возвращает True только в том случае, если строка составлена исключительно из верхнего регистра.
print(my_string.istitle()) #метод istitle(), проверяет, начинается ли каждое слово в строке с заглавной буквы.
print(my_string.isnumeric()) #метод isnumeric(), возвращает True в том случае, если все символы, входящие в строку, являются цифрами
print(my_string.isdigit()) #метод isdigit(), возвращает True в том случае, если все символы, входящие в строку, являются цифрами
print(my_string.isalpha()) #метод isalpha(), возвращает True в том случае, если все символы, входящие в строку, являются буквами
print(my_string.isalnum()) #метод isalnum(), возвращает True в том случае, если все символы, входящие в строку, являются буквами и цифрами
print(my_string.isspace()) #метод isspace(), возвращает True в том случае, если все символы неотображаемы
                            #Состоит ли строка из неотображаемых символов (пробел, символ перевода страницы ('\f'), "новая строка" ('\n'), "перевод каретки" ('\r'), "горизонтальная табуляция" ('\t') и "вертикальная табуляция" ('\v'))
print(my_string.istitle()) #проверяет, начинается ли каждое слово в строке с заглавной буквы.
print(my_string.replace(' ','')) #методом replace() можно заменить на что-либо все вхождения некоей подстроки

print('длинный' in my_string)#вернёт True в том случае, если строка содержит искомую подстроку.
print(my_string.find('joke')) #Метод find() возвращает -1 в том случае, если искомая подстрока в строке не найдена.
print(my_string.index('and')) #Метод index() в подобной ситуации выбрасывает ошибку ValueError.
print(my_string.count('н')) #метод count(), который возвращает количество вхождений в строку заданного символа
print(my_string.capitalize()) #методом capitalize() делает первый символ строки заглавной буквой
print(my_string.index('и',15,44)) #Метод index() можно вызывать, передавая ему необязательные аргументы, представляющие индекс начального и конечного фрагмента строки, в пределах которых и нужно осуществлять поиск подстроки.
print(my_string.split(' ')) #метод split(), разбивает строку по заданному символу или по нескольким символам.
print(my_string.partition(' and ')) #Метод partition() разбивает строку по заданной подстроке. После этого результат возвращается в виде кортежа



map = str.maketrans("АБВГ", "1234") #Метод maketrans() позволяет описать отображение одних символов на другие, возвращая таблицу преобразования.
print("Алёша Ведёт Гелик и Бубнит в глухомани".translate(map)) #Метод translate() позволяет применить заданную таблицу для преобразования строки

print(''.join(reversed(my_string)))
join_ = '-'.join(['a','b','c'])
print(join_)

difficulty = 'easy'
thing = 'exam'
print('That {} was {}!'.format(thing, difficulty))
